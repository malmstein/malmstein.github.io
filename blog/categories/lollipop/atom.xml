<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lollipop | David Gonzalez]]></title>
  <link href="http://malmstein.github.io/blog/categories/lollipop/atom.xml" rel="self"/>
  <link href="http://malmstein.github.io/"/>
  <updated>2015-04-05T15:37:10+01:00</updated>
  <id>http://malmstein.github.io/</id>
  <author>
    <name><![CDATA[David Gonzalez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finishing Your Very First Android TV Application]]></title>
    <link href="http://malmstein.github.io/blog/2014/11/15/finishing-your-very-first-android-tv-application/"/>
    <updated>2014-11-15T12:46:54+00:00</updated>
    <id>http://malmstein.github.io/blog/2014/11/15/finishing-your-very-first-android-tv-application</id>
    <content type="html"><![CDATA[<p>A few days ago <a href="" title="http://www.malmstein.com/blog/2014/10/21/building-applications-for-android-tv/">we started to build an Android TV application</a> and the feedback was very good. Today, it&rsquo;s time to take another step since we&rsquo;ll be publishing our
<a href="" title="https://github.com/malmstein/AndroidTVExplorer">AndroidTV Explorer</a> with some updates. After these updates, you&rsquo;ll be able to see the details of a video and stream it&rsquo;s content.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/detail.gif">https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/detail.gif</a>&#8221;></p>

<!-- more -->


<p>Obviously, the application is not very useful right now. There is a list of videos and different
categories but there is no actual way to stream a video.</p>

<p>For that reason, there are two new components that we need to build. Those are
the video detail screen and the video player screen. Let&rsquo;s start with the detail one.</p>

<h1>DetailsFragment</h1>

<p>To keep things simple for now and fulfill the purpose of the series, we will use the <a href="http://developer.android.com/tools/support-library/features.html#v17-leanback">Leanback Support Library</a> again. This time, the <code>Widget</code> we are interested in is the <a href="https://developer.android.com/reference/android/support/v17/leanback/app/DetailsFragment.html">DetailsFragment</a>, which works in a similar way as the <code>BrowseFragment</code> used in the previous post.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/detail.png">https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/detail.png</a>&#8221;></p>

<h2>The Presenter</h2>

<p>Let me introduce you to the <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ClassPresenterSelector.html">ClassPresenterSelector</a>. Following the same
pattern as the <code>Presenter</code> used at the <code>BrowseFragment</code>, the <code>DetailsFragment</code> is going to use a <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRowPresenter.html">DetailsOverviewRowPresenter</a> which will present the information.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClassPresenterSelector</span> <span class="n">ps</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClassPresenterSelector</span><span class="o">();</span>
</span><span class='line'><span class="n">ps</span><span class="o">.</span><span class="na">addClassPresenter</span><span class="o">(</span><span class="n">DetailsOverviewRow</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">dorPresenter</span><span class="o">);</span>
</span><span class='line'><span class="n">ps</span><span class="o">.</span><span class="na">addClassPresenter</span><span class="o">(</span><span class="n">ListRow</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">ListRowPresenter</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see, the <code>DetailsFragment</code> has two separate levels of information. There is a header or overview called <code>DetailsOverviewRowPresenter</code> which will show the detail of the video we interested in.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DetailsOverviewRowPresenter</span> <span class="n">dorPresenter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DetailsOverviewRowPresenter</span><span class="o">(</span><span class="k">new</span> <span class="nf">VideoDetailsPresenter</span><span class="o">());</span>
</span><span class='line'><span class="n">dorPresenter</span><span class="o">.</span><span class="na">setBackgroundColor</span><span class="o">(</span><span class="n">getResources</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">detail_background</span><span class="o">));</span>
</span><span class='line'><span class="n">dorPresenter</span><span class="o">.</span><span class="na">setStyleLarge</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That corresponds to the Video detail information. It&rsquo;s the <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.html">DetailsOverviewRow</a> and consists of an image, a description view, and optionally a series of Actions that can be taken for the item.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VideoDetailsPresenter</span> <span class="kd">extends</span> <span class="n">AbstractDetailsDescriptionPresenter</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onBindDescription</span><span class="o">(</span><span class="n">ViewHolder</span> <span class="n">viewHolder</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Video</span> <span class="n">details</span> <span class="o">=</span> <span class="o">(</span><span class="n">Video</span><span class="o">)</span> <span class="n">object</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">viewHolder</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">setText</span><span class="o">(</span><span class="n">details</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>  <span class="n">viewHolder</span><span class="o">.</span><span class="na">getSubtitle</span><span class="o">().</span><span class="na">setText</span><span class="o">(</span><span class="n">details</span><span class="o">.</span><span class="na">getStudio</span><span class="o">());</span>
</span><span class='line'>  <span class="n">viewHolder</span><span class="o">.</span><span class="na">getBody</span><span class="o">().</span><span class="na">setText</span><span class="o">(</span><span class="n">details</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The other important piece of information is the Related Videos section. In order to build that, the <code>DetailsFragment</code> asks the <code>ClassPresenterSelector</code> to show a <code>ListRowPresenter</code>. What are those related videos you may ask? We&rsquo;ll use the category of the video to get that information, basically showing all the videos from the same category.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ArrayObjectAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ArrayObjectAdapter</span><span class="o">(</span><span class="n">ps</span><span class="o">);</span>
</span><span class='line'><span class="n">adapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">detailRow</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">subcategories</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span><span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">related_movies</span><span class="o">)};</span>
</span><span class='line'><span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Video</span><span class="o">&gt;&gt;</span> <span class="n">videos</span> <span class="o">=</span> <span class="n">VideoProvider</span><span class="o">.</span><span class="na">getMovieList</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ArrayObjectAdapter</span> <span class="n">listRowAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ArrayObjectAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nf">CardPresenter</span><span class="o">());</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Video</span><span class="o">&gt;&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">videos</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">selectedVideo</span><span class="o">.</span><span class="na">getCategory</span><span class="o">().</span><span class="na">indexOf</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Video</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">listRowAdapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">HeaderItem</span> <span class="n">header</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HeaderItem</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">subcategories</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="n">adapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListRow</span><span class="o">(</span><span class="n">header</span><span class="o">,</span> <span class="n">listRowAdapter</span><span class="o">));&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Good, we are now able to see the video detail and some related videos but&hellip; how do we interact with the video?</p>

<h2>Easily adding actions</h2>

<p>For that purpose <code>DetailsFragment</code> exposes a very simple solution, the so called <code>Action</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DetailsOverviewRow</span> <span class="n">detailRow</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DetailsOverviewRow</span><span class="o">(</span><span class="n">selectedMovie</span><span class="o">);</span>
</span><span class='line'><span class="n">row</span><span class="o">.</span><span class="na">addAction</span><span class="o">(</span><span class="k">new</span> <span class="nf">Action</span><span class="o">(</span><span class="n">ACTION_WATCH_VIDEO</span><span class="o">,</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">watch_video_1</span><span class="o">),</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">watch_video_2</span><span class="o">)));</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The element which will handle the <code>ActionClick</code> is the <code>DetailsOverviewRowPresenter</code>. Each of of the added actions is identified by it&rsquo;s <code>id</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dorPresenter</span><span class="o">.</span><span class="na">setOnActionClickedListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">OnActionClickedListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActionClicked</span><span class="o">(</span><span class="n">Action</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">action</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="n">ACTION_WATCH_VIDEO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span> <span class="n">PlayerActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">getResources</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">video</span><span class="o">),</span> <span class="n">selectedVideo</span><span class="o">);</span>
</span><span class='line'>      <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span> <span class="n">action</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Right, so there is some interaction here, let&rsquo;s stream the video once and for all. The TV is the perfect form factor for displaying videos, so that should be pretty straight forward!</p>

<h1>PlayerFragment</h1>

<p>Displaying a video is probably one of the most important use cases of Android TV. It&rsquo;s pretty clear at this point that the interaction between remote controller and device must be simple and
easy to use. For that reason the <code>TVPlayerFragment</code> was born.</p>

<p>The idea is pretty simple, tell the <code>Fragment</code> what to play and forget about the rest. One can press the keys in the remote and the expected behaviour will occur. The most interesting part is probably the direction arrows. When using them, I&rsquo;d expect to seek over the video if pressing left or right. It&rsquo;s all about accessing the <a href="http://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_PLAY_PAUSE">KeyEvents</a></p>

<p>Since this is a <code>Fragment</code>, the <code>KeyEvents</code> come filtered by the <code>Activity</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyDown</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">,</span> <span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_LEFT</span> <span class="o">||</span> <span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_RIGHT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">((</span><span class="n">TVPlayerFragment</span><span class="o">)</span> <span class="n">getFragmentManager</span><span class="o">().</span><span class="na">findFragmentById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">player_fragment</span><span class="o">)).</span><span class="na">onKeyDown</span><span class="o">(</span><span class="n">keyCode</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onKeyDown</span><span class="o">(</span><span class="n">keyCode</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onKeyDown</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">currentPos</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kt">int</span> <span class="n">delta</span> <span class="o">=</span> <span class="o">(</span><span class="n">videoDuration</span> <span class="o">/</span> <span class="n">SCRUB_SEGMENT_DIVISOR</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">delta</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">MIN_SCRUB_TIME</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">delta</span> <span class="o">=</span> <span class="n">MIN_SCRUB_TIME</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nf">if</span> <span class="o">(!</span><span class="n">areControllersVisible</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">updateControllersVisibility</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nf">switch</span> <span class="o">(</span><span class="n">keyCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_LEFT</span><span class="o">:</span>
</span><span class='line'>      <span class="n">currentPos</span> <span class="o">=</span> <span class="n">videoView</span><span class="o">.</span><span class="na">getCurrentPosition</span><span class="o">();</span>
</span><span class='line'>      <span class="n">currentPos</span> <span class="o">-=</span> <span class="n">delta</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">currentPos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">play</span><span class="o">(</span><span class="n">currentPos</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_DPAD_RIGHT</span><span class="o">:</span>
</span><span class='line'>      <span class="n">currentPos</span> <span class="o">=</span> <span class="n">videoView</span><span class="o">.</span><span class="na">getCurrentPosition</span><span class="o">();</span>
</span><span class='line'>      <span class="n">currentPos</span> <span class="o">+=</span> <span class="n">delta</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">currentPos</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">videoDuration</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">play</span><span class="o">(</span><span class="n">currentPos</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Even though we are displaying video in the TV we can&rsquo;t forget that this is still Android and we still have to deal with our beloved <code>MediaPlayer</code>. Some of you may have read about <a href="https://github.com/malmstein/fenster">Fenster</a>, a library I&rsquo;ve been working on that simplifies the way we stream video content. A few weeks ago we explained how the <code>MediaPlayer</code> lifecycle works and <a href="http://www.malmstein.com/blog/2014/08/09/how-to-use-a-textureview-to-display-a-video-with-custom-media-player-controls/">how to stream a video</a> in a very simple way.</p>

<p>Well, we still need to deal with those callbacks but we can do it a bit differently.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setMediaPlayerCallbacks</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">videoView</span><span class="o">.</span><span class="na">setOnErrorListener</span><span class="o">(</span><span class="k">new</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">OnErrorListener</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onError</span><span class="o">(</span><span class="n">MediaPlayer</span> <span class="n">mp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">what</span><span class="o">,</span> <span class="kt">int</span> <span class="n">extra</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">videoView</span><span class="o">.</span><span class="na">stopPlayback</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mPlaybackState</span> <span class="o">=</span> <span class="n">PlaybackState</span><span class="o">.</span><span class="na">IDLE</span><span class="o">;</span>
</span><span class='line'>  <span class="n">controllersTimer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="o">();</span>
</span><span class='line'>  <span class="n">controllersTimer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nf">BackToDetailTask</span><span class="o">(),</span> <span class="n">CLOSE_VIDEO_TIME</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">});&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">videoView</span><span class="o">.</span><span class="na">setOnPreparedListener</span><span class="o">(</span><span class="k">new</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">OnPreparedListener</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPrepared</span><span class="o">(</span><span class="n">MediaPlayer</span> <span class="n">mp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">videoDuration</span> <span class="o">=</span> <span class="n">mp</span><span class="o">.</span><span class="na">getDuration</span><span class="o">();</span>
</span><span class='line'>  <span class="n">endText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">formatTimeSignature</span><span class="o">(</span><span class="n">videoDuration</span><span class="o">));</span>
</span><span class='line'>  <span class="n">videoSeekbar</span><span class="o">.</span><span class="na">setMax</span><span class="o">(</span><span class="n">videoDuration</span><span class="o">);</span>
</span><span class='line'>  <span class="n">restartSeekBarTimer</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">});&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">videoView</span><span class="o">.</span><span class="na">setOnCompletionListener</span><span class="o">(</span><span class="k">new</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">OnCompletionListener</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompletion</span><span class="o">(</span><span class="n">MediaPlayer</span> <span class="n">mp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">stopSeekBarTimer</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mPlaybackState</span> <span class="o">=</span> <span class="n">PlaybackState</span><span class="o">.</span><span class="na">IDLE</span><span class="o">;</span>
</span><span class='line'>  <span class="n">updatePlayButton</span><span class="o">(</span><span class="n">PlaybackState</span><span class="o">.</span><span class="na">IDLE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">controllersTimer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Timer</span><span class="o">();</span>
</span><span class='line'>  <span class="n">controllersTimer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nf">BackToDetailTask</span><span class="o">(),</span> <span class="n">HIDE_CONTROLLER_TIME</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We are basically saying whenever there&rsquo;s an error we&rsquo;ll just navigate back to the video detail screen. The other thing we are saying is that the <code>SeekBar</code> position will be updated every second and not in the main thread.</p>

<p>At this point, we can stream video content and enjoy it in our Android TV!</p>

<h1>Show me the code</h1>

<p>You&rsquo;ll find the entire project on <a href="https://github.com/malmstein/AndroidTVExplorer">Github</a> and I&rsquo;ll be adding
more features along with all the blog posts of this series. As always, all <del>trolling</del> feedback is more than welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Applications for Android TV]]></title>
    <link href="http://malmstein.github.io/blog/2014/10/21/building-applications-for-android-tv/"/>
    <updated>2014-10-21T00:19:05+01:00</updated>
    <id>http://malmstein.github.io/blog/2014/10/21/building-applications-for-android-tv</id>
    <content type="html"><![CDATA[<p>By now you all have heard about <a href="http://developer.android.com/about/versions/lollipop.html">the new Android release</a> and almost all of you have
played with new API and probably experimented with <a href="http://www.google.com/design/spec/material-design/introduction.html">Material Design</a>.</p>

<p>I have to say though, that one of the things that I&rsquo;m most excited about is <a href="http://developer.android.com/design/tv/index.html">Android TV</a>. I was very much into it <a href="http://www.google.com/tv/">before it was cool</a> but never got the chance to actually get hands on. Happily this has changed now and I&rsquo;ll be writing a series of posts about developing for Android TV, how to start, how to make your existing app compatible and how to make the most of it.</p>

<p>If you are interested, please read on!</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/intro.gif">https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/intro.gif</a>&#8221;></p>

<!-- more -->


<p>Building applications for Android TV is not just developing and designing for an extremely big tablet. Yes, it is
a much bigger display but that&rsquo;s not the point. <strong>The interaction with the device is completely different compared to a phone</strong>, you are not going
to scroll through a 55 inches TV, are you? Same goes for the use cases, so far no one has been spotted reading the news in the underground on a <a href="http://www.engadget.com/2014/06/25/android-tv-is-coming-to-sony-sharp-and-philips-tvs-next-year/">Sony Bravia</a>.</p>

<h1>Support Libraries</h1>

<p>To make things a bit easier for us, Google has created a <a href="http://developer.android.com/tools/support-library/features.html#v17-leanback">Leanback Support Library</a> which contains APIs to support building user interfaces on TV devices. It provides a number of important widgets for TV apps which we&rsquo;ll make use in this project.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">recyclerview</span><span class="o">-</span><span class="nl">v7:</span><span class="mf">21.0</span><span class="o">.+&amp;</span><span class="n">rsquo</span><span class="o">;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">leanback</span><span class="o">-</span><span class="nl">v17:</span><span class="mf">21.0</span><span class="o">.+&amp;</span><span class="n">rsquo</span><span class="o">;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">appcompat</span><span class="o">-</span><span class="nl">v7:</span><span class="mf">21.0</span><span class="o">.+&amp;</span><span class="n">rsquo</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Demo project: The Android TV Explorer</h1>

<p>It&rsquo;s always easier to show and share while building stuff so I&rsquo;m creating this example project called <a href="https://github.com/malmstein/AndroidTVExplorer">Android TV Explorer</a> where all the knowledge from this series will be pushed.</p>

<p>By the end of this series the project will be a <strong>great starting point</strong> for anyone interested in developing a media library application for Android TV.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/home.png">https://raw.githubusercontent.com/malmstein/AndroidTVExplorer/master/art/home.png</a>&#8221;></p>

<h1>Creating a library layout using the Browse Fragment</h1>

<p>One of the widgets that the <code>Leanback Support Library</code> provides is the <a href="http://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html">BrowseFragment</a>.
A fragment for creating leanback browse screens, it is composed of a <code>RowsFragment</code> and a <code>HeadersFragment</code>.</p>

<p>As you can see in the library screen above, the header corresponds to the list on the left and the rows to the grid on the right. <code>BrowseFragment</code> allows us to customise several actions and some UI elements, like changing the default visibility of the <code>HeadersFragment</code> or changing the behaviour of the transition when entering one of the rows.</p>

<p>For the purpose of this example we are not going to change anything today, indeed we are going to
take a closer look at <strong>how the items are displayed</strong>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setupUIElements</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">setTitle</span><span class="o">(</span><span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">browse_title</span><span class="o">));</span>
</span><span class='line'>  <span class="n">setHeadersState</span><span class="o">(</span><span class="n">HEADERS_ENABLED</span><span class="o">);</span>
</span><span class='line'>  <span class="n">setHeadersTransitionOnBackEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="n">setBrandColor</span><span class="o">(</span><span class="n">getResources</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">fastlane_background</span><span class="o">));</span>
</span><span class='line'>  <span class="n">setSearchAffordanceColor</span><span class="o">(</span><span class="n">getResources</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">search_opaque</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There several helper methods that the <code>BrowseFragment</code> exposes that make it very simple to customise its look and feel. For example, <code>setBrandColor()</code> and <code>setSearchAffordanceColor()</code> allow us to change the background of the <code>HeadersFragment</code> and the color of the rounded search icon.</p>

<h1>Presenter</h1>

<p><code>BrowseFragment</code> renders the elements of its <a href="http://developer.android.com/reference/android/support/v17/leanback/widget/ArrayObjectAdapter.html">ArrayObjectAdapter</a> as a sequence of rows and a vertical list. This <code>ObjectAdapter</code> makes use of a <a href="http://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html">Presenter</a>, concept which those familiar with the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">Model-view-presenter</a> will quickly understand.</p>

<p>A <code>Presenter</code> is used to generate <code>Views</code> and bind <code>Objects</code> to them on demand. It is closely related to concept of an <code>RecyclerView.Adapter</code>, but is non position-based.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoadFinished</span><span class="o">(</span><span class="n">Loader</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Movie</span><span class="o">&gt;&gt;&gt;</span> <span class="n">arg0</span><span class="o">,</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Movie</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mRowsAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ArrayObjectAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListRowPresenter</span><span class="o">());</span>
</span><span class='line'>  <span class="n">CardPresenter</span> <span class="n">cardPresenter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CardPresenter</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nf">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Movie</span><span class="o">&gt;&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">data</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayObjectAdapter</span> <span class="n">listRowAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ArrayObjectAdapter</span><span class="o">(</span><span class="n">cardPresenter</span><span class="o">);</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Movie</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="nf">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">listRowAdapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">HeaderItem</span> <span class="n">header</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HeaderItem</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>  <span class="n">mRowsAdapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListRow</span><span class="o">(</span><span class="n">header</span><span class="o">,</span> <span class="n">listRowAdapter</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nf">setAdapter</span><span class="o">(</span><span class="n">mRowsAdapter</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We are using a <code>CardPresenter</code> which will <strong>display all the movies from each category into cards</strong>. The elements of the <code>BrowseFragment</code> adapter must be subclasses of &lsquo;Row&rsquo;, that&rsquo;s the reason why the <code>mRowsAdapter</code> uses the <code>ListRowPresenter</code>. Again, this is just a wrapper around normal fragments and its goal is to make things easy to develop from scratch. Obviously, one can make use of them or not but for the purpose of this project we&rsquo;ll stick to the simplicity&hellip; for now!</p>

<h1>Setting up event listeners</h1>

<p>There are two exposed <code>Listeners</code> in the <code>BrowseFragment</code>. It&rsquo;s very interesting to see
how the selection and click are two different events, the reason why is very simple and you&rsquo;ll get
to understand it after reading the code.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">protected</span> <span class="n">OnItemViewSelectedListener</span> <span class="nf">getDefaultItemSelectedListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">OnItemViewSelectedListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemSelected</span><span class="o">(</span><span class="n">Presenter</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">viewHolder</span><span class="o">,</span> <span class="n">Object</span> <span class="n">item</span><span class="o">,</span> <span class="n">RowPresenter</span><span class="o">.</span><span class="na">ViewHolder</span>                  <span class="n">viewHolder2</span><span class="o">,</span> <span class="n">Row</span> <span class="n">row</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mBackgroundURI</span> <span class="o">=</span> <span class="o">((</span><span class="n">Movie</span><span class="o">)</span> <span class="n">item</span><span class="o">).</span><span class="na">getBackgroundImageURI</span><span class="o">();</span>
</span><span class='line'>      <span class="n">updateBackgroundPicture</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">protected</span> <span class="n">OnItemViewClickedListener</span> <span class="nf">getDefaultItemClickedListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">OnItemViewClickedListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemClicked</span><span class="o">(</span><span class="n">Presenter</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">viewHolder</span><span class="o">,</span> <span class="n">Object</span> <span class="n">item</span><span class="o">,</span> <span class="n">RowPresenter</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">viewHolder2</span><span class="o">,</span> <span class="n">Row</span> <span class="n">row</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span> <span class="n">movie</span><span class="o">.</span><span class="na">getTitle</span><span class="o">(),</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When a video is selected we can use the <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html">BackgroundManager</a> to update the background picture.</p>

<h1>Background Manager</h1>

<p>This is a complete different approach to what a mobile or tablet application would do but in my honest opinion makes a lot of sense. <strong>Android TV supports background image continuity between multiple <code>Activities</code></strong>.
We are used to have transitions between all the <code>Activities</code> but this can be confusing in bigger form factors and when there is not a context switch, making use of the <code>Background Manager</code> we can deliver smoother transitions that won&rsquo;t disturb the user when looking at a big screen.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">updateBackground</span><span class="o">(</span><span class="n">Drawable</span> <span class="n">drawable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BackgroundManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">getActivity</span><span class="o">()).</span><span class="na">setDrawable</span><span class="o">(</span><span class="n">drawable</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Tip</h2>

<p>Setting up the environment might be a bit tricky when talking about Android TV. Some of you may have an
<a href="http://developer.android.com/tv/adt-1/index.html">ADT Developer Kit</a> but if you don&rsquo;t you&rsquo;ll need to create
an emulator to start with (or wait for the brand new Nexus Player). It&rsquo;s pretty straight forward to <a href="http://developer.android.com/training/tv/start/start.html#run">create an emulator</a> but it&rsquo;s very helpful to activate
<a href="http://developer.android.com/tools/devices/emulator.html#acceleration">hardware acceleration</a> in order to
have better performance in the Android TV emulator.</p>

<h1>Show me the code</h1>

<p>You&rsquo;ll find the entire project on <a href="https://github.com/malmstein/AndroidTVExplorer">Github</a> and I&rsquo;ll be adding
more features along with all the blog posts of this series. As always, all <del>trolling</del> feedback is more than welcome!</p>
]]></content>
  </entry>
  
</feed>
