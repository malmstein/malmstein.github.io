<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mediaplayer | David Gonzalez]]></title>
  <link href="http://malmstein.github.io/blog/categories/mediaplayer/atom.xml" rel="self"/>
  <link href="http://malmstein.github.io/"/>
  <updated>2014-10-11T13:05:40+01:00</updated>
  <id>http://malmstein.github.io/</id>
  <author>
    <name><![CDATA[David Gonzalez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Multitouch Gestures to Fenster]]></title>
    <link href="http://malmstein.github.io/blog/2014/09/27/all-your-gestures-belong-to-me/"/>
    <updated>2014-09-27T19:12:51+01:00</updated>
    <id>http://malmstein.github.io/blog/2014/09/27/all-your-gestures-belong-to-me</id>
    <content type="html"><![CDATA[<p>In the <a href="www.malmstein.com/blog/2014/09/21/control-the-media-player-using-gestures/">previous post</a>
we showed how to implement some basic gestures and control the <code>MediaPlayer</code>.</p>

<p>Today we are going a step further by implementing multitouch gestures. So far we can
control the progress of a video but that&rsquo;s not enough. If we want full control over the
<code>MediaPlayer</code> we need to be able to change the volume, adjust the brightness and skip the
video forward and backwards.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/multitouch.gif">https://raw.githubusercontent.com/malmstein/Fenster/master/art/multitouch.gif</a>&#8221;></p>

<!-- more -->


<p>The <code>MediaPlayerController</code> source code is getting bigger and bigger so it&rsquo;s very important to keep
things as reusable and clean as possible. For that reason, tasks like update the volume
or adjusting the brightness can be done from their own components, in these case, <a href="http://developer.android.com/reference/android/widget/SeekBar.html">SeekBar</a>.</p>

<p>With these new <code>Views</code>, one will be able to just import and use these small controllers without having
to import the whole <code>MediaPlayerController</code>, just trying to make things easy here!</p>

<h1>Volume SeekBar</h1>

<p>Taking advantage of the gestures, we are also going to update the volume&hellip; how do we do that?
There is now a new component in <a href="https://github.com/malmstein/fenster">Fenster</a> called <a href="https://github.com/malmstein/fenster">VolumeSeekBar</a>,
a <code>SeekBar</code> which updates the volume of the <a href="http://developer.android.com/reference/android/media/AudioManager.html">AudioManager</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialise</span><span class="o">(</span><span class="kd">final</span> <span class="n">Listener</span> <span class="n">volumeListener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">audioManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">AudioManager</span><span class="o">)</span> <span class="n">getContext</span><span class="o">().</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">AUDIO_SERVICE</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">volumeListener</span> <span class="o">=</span> <span class="n">volumeListener</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">this</span><span class="o">.</span><span class="na">setMax</span><span class="o">(</span><span class="n">audioManager</span><span class="o">.</span><span class="na">getStreamMaxVolume</span><span class="o">(</span><span class="n">AudioManager</span><span class="o">.</span><span class="na">STREAM_MUSIC</span><span class="o">));</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="n">audioManager</span><span class="o">.</span><span class="na">getStreamVolume</span><span class="o">(</span><span class="n">AudioManager</span><span class="o">.</span><span class="na">STREAM_MUSIC</span><span class="o">));</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">setOnSeekBarChangeListener</span><span class="o">(</span><span class="n">volumeSeekListener</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here you can see the public method to initialise the <code>View</code>, the only thing we need to pass is
the <code>Listener</code> which will notify when the view is being dragged.</p>

<p>The <code>AudioManager</code> is the object which is in charge of the volume, <code>setStreamVolume()</code> is the
method which is exposed for that matter. Since we want to update them based on the changes
on the <code>SeekBar</code>, the <code>SeekBarChangeListener</code> is the way we want to go.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">OnSeekBarChangeListener</span> <span class="n">volumeSeekListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">OnSeekBarChangeListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onProgressChanged</span><span class="o">(</span><span class="n">SeekBar</span> <span class="n">seekBar</span><span class="o">,</span> <span class="kt">int</span> <span class="n">vol</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">fromUser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">audioManager</span><span class="o">.</span><span class="na">setStreamVolume</span><span class="o">(</span><span class="n">AudioManager</span><span class="o">.</span><span class="na">STREAM_MUSIC</span><span class="o">,</span> <span class="n">vol</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartTrackingTouch</span><span class="o">(</span><span class="n">SeekBar</span> <span class="n">seekBar</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">volumeListener</span><span class="o">.</span><span class="na">onVolumeStartedDragging</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStopTrackingTouch</span><span class="o">(</span><span class="n">SeekBar</span> <span class="n">seekBar</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">volumeListener</span><span class="o">.</span><span class="na">onVolumeFinishedDragging</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see, we are also notifying the root controller that some dragging is going on.
This will be used in order to prevent the controller from being hidden while the user is
dragging the <code>Seekbar</code>.</p>

<p>We can&rsquo;t forget about the <strong>hardware keys</strong>, if we don&rsquo;t listen for updates on those keys
we&rsquo;ll be out of sync. Don&rsquo;t worry, we got this covered too.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onAttachedToWindow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onAttachedToWindow</span><span class="o">();</span>
</span><span class='line'>  <span class="n">getContext</span><span class="o">().</span><span class="na">registerReceiver</span><span class="o">(</span><span class="n">volumeReceiver</span><span class="o">,</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">IntentFilter</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">android</span><span class="o">.</span><span class="na">media</span><span class="o">.</span><span class="na">VOLUME_CHANGED_ACTION</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDetachedFromWindow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">unregisterVolumeReceiver</span><span class="o">();</span>
</span><span class='line'>  <span class="n">getContext</span><span class="o">().</span><span class="na">unregisterReceiver</span><span class="o">(</span><span class="n">volumeReceiver</span><span class="o">);</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">BroadcastReceiver</span> <span class="n">volumeReceiver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BroadcastReceiver</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="n">audioManager</span><span class="o">.</span><span class="na">getStreamVolume</span><span class="o">(</span><span class="n">AudioManager</span><span class="o">.</span><span class="na">STREAM_MUSIC</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can use a <a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html">BroadcastReceiver</a>
which alerts us when the volume has changed via hardware keys. We are going to make us of the view lifecycle
in order to register and unregister and update the <code>SeekBar</code> progress.</p>

<h1>Brightness SeekBar</h1>

<p>Another interesting feature of any <code>MediaPlayer</code> is to adjust the screen brightness.
Currently, Android doesn&rsquo;t make it to easy for the user to do so and that&rsquo;s where <a href="https://github.com/malmstein/fenster">Fenster</a> comes in.</p>

<p>The screen brightness is a <a href="http://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS">System Setting</a>
that goes from 0 to 255. In order to change it, we just need to update the system setting with its new value.</p>

<p>Since we want to make it easy and modular, there is now a new class which will handle the
brightness update, the <a href="https://github.com/malmstein/fenster/blob/master/library/src/main/java/com/malmstein/fenster/gestures/FensterGestureControllerView.java">BrightnessHelper</a>.
It just exposes a static method which needs a <code>Context</code> and the integer value with the new brightness.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setBrightness</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">brightness</span><span class="o">){</span>
</span><span class='line'>  <span class="n">ContentResolver</span> <span class="n">cResolver</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Settings</span><span class="o">.</span><span class="na">System</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">cResolver</span><span class="o">,</span> <span class="n">Settings</span><span class="o">.</span><span class="na">System</span><span class="o">.</span><span class="na">SCREEN_BRIGHTNESS</span><span class="o">,</span> <span class="n">brightness</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Our approach is to use a <code>SeekBar</code>, similar as the <code>VolumeSeekBar</code> one. For that purpose, and in order make things more interactive
to the user, we&rsquo;ll use a <code>SeekBarChangeListener</code> to update the brightness meanwhile the <code>SeekBar</code> progress changes.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="n">OnSeekBarChangeListener</span> <span class="n">brightnessSeekListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">OnSeekBarChangeListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onProgressChanged</span><span class="o">(</span><span class="n">SeekBar</span> <span class="n">seekBar</span><span class="o">,</span> <span class="kt">int</span> <span class="n">brightness</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">fromUser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setBrightness</span><span class="o">(</span><span class="n">brightness</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setProgress</span><span class="o">(</span><span class="n">brightness</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStartTrackingTouch</span><span class="o">(</span><span class="n">SeekBar</span> <span class="n">seekBar</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">brightnessListener</span><span class="o">.</span><span class="na">onBrigthnessStartedDragging</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStopTrackingTouch</span><span class="o">(</span><span class="n">SeekBar</span> <span class="n">seekBar</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">brightnessListener</span><span class="o">.</span><span class="na">onBrightnessFinishedDragging</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>How the Controller updates it all</h1>

<p>As a recap from the past blog post and this very same one, we are now able to detect gestures like
horizontal or vertical scrolls and horizontal or vertical flings. On the other hand, we also have
now two <code>Views</code> that can update the volume and the brightness so&hellip; let&rsquo;s put all that
together.</p>

<p>What we are going to do is to <strong>update the video progress</strong> when scroll or fling movements occur
and only <strong>one finger</strong> is being used to make the gesture. When <strong>two or more fingers</strong> are being used we
will <strong>adjust the screen brightness or the volume</strong>.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/multitouch.gif">https://raw.githubusercontent.com/malmstein/Fenster/master/art/multitouch.gif</a>&#8221;></p>

<p>How do we do that?</p>

<p><a href="http://developer.android.com/reference/android/view/MotionEvent.html">MotionEvent</a> already tells us
how many pointers are being used, that&rsquo;s basically telling us how many fingers are triggering the
event.</p>

<p>When a gesture with horizontal progress is detected we&rsquo;ll react on the video progress. One finger
for small updates and two fingers for skipping 30 seconds backwards or forwards. The delta parameter
tells us is the direction of the movement is right or left.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onHorizontalScroll</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="kt">float</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getPointerCount</span><span class="o">()</span> <span class="o">==</span> <span class="n">ONE_FINGER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">updateVideoProgressBar</span><span class="o">(</span><span class="n">delta</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">delta</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">skipVideoForward</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">skipVideoBackwards</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When the movement is vertical, we&rsquo;ll update the volume and the brightness. One finger for the
volume and two or more for the brightness.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onVerticalScroll</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="kt">float</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getPointerCount</span><span class="o">()</span> <span class="o">==</span> <span class="n">ONE_FINGER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">updateVolumeProgressBar</span><span class="o">(</span><span class="n">delta</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">updateBrightnessProgressBar</span><span class="o">(</span><span class="n">delta</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Skipping the video</h2>

<p>The video skipping is pretty straight forward since the timeframe we are going to skip the video
forward or backwards is fixed. We just need to update the <code>SeekBar</code> progress:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">skipVideoForward</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">skipUnit</span> <span class="o">=</span> <span class="n">mProgress</span><span class="o">.</span><span class="na">getProgress</span><span class="o">()</span> <span class="o">+</span> <span class="n">SKIP_VIDEO_PROGRESS</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mSeekListener</span><span class="o">.</span><span class="na">onProgressChanged</span><span class="o">(</span><span class="n">mProgress</span><span class="o">,</span> <span class="n">skipUnit</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Next steps</h1>

<p>There is still much to do with <code>Fenster</code>. I&rsquo;ll be adding some ideas to the GitHub repo, please feel
free to <a href="https://github.com/malmstein/fenster/issues">add your own requests</a> or even implement
them yourselves!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Gestures to Control the Media Player]]></title>
    <link href="http://malmstein.github.io/blog/2014/09/21/control-the-media-player-using-gestures/"/>
    <updated>2014-09-21T19:24:59+01:00</updated>
    <id>http://malmstein.github.io/blog/2014/09/21/control-the-media-player-using-gestures</id>
    <content type="html"><![CDATA[<p>In the previous post we explained a way of displaying a <a href="http://www.malmstein.com/blog/2014/08/09/how-to-use-a-textureview-to-display-a-video-with-custom-media-player-controls">customised Media Player controller</a>,
which as we saw, it&rsquo;s very useful if we need customised actions or UI for that controller.</p>

<p>This time we want to go a step forward and introduce a new way of interacting with the Media Player.
The idea is to use gestures in order to lower or raise the volume, seek forward and backwards
and to skip the video for 30 seconds.</p>

<p>I&rsquo;m a big fan of <a href="https://play.google.com/store/apps/details?id=com.mxtech.videoplayer.ad">MX Player</a> and
always wanted to implement the gesture detection that they introduced.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/fenster_gesture.gif">https://raw.githubusercontent.com/malmstein/Fenster/master/art/fenster_gesture.gif</a>&#8221;></p>

<!-- more -->


<p>In order to achieve this, the first thing we need to understand is how the gestures
are detected and how we can use them in our benefit.</p>

<p>When one or more fingers are placed on the screen, the callback <code>onTouchEvent()</code> is triggered on
the View that received the touch events. What&rsquo;s important here is to understand that a gesture
is a sequence of touch events and each one of them will fire <code>onTouchEvent()</code>.</p>

<p>A gesture starts when the user first touches the screen, continues as the system tracks the
position of the user&rsquo;s finger(s), and ends by capturing the final event of the user&rsquo;s fingers
leaving the screen. Throughout this interaction, the <a href="http://developer.android.com/reference/android/view/MotionEvent.html">MotionEvent</a>
delivered to <code>onTouchEvent()</code> provides the details of every interaction.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/basic_multitouch.gif">https://raw.githubusercontent.com/malmstein/Fenster/master/art/basic_multitouch.gif</a>&#8221;></p>

<h2>Understanding MotionEvent</h2>

<p>Android uses <code>MotionEvent</code> to report movements, providing an action and a set of axis values. <strong>Each action
describes the state change occurred</strong>, such as pointer going down, up or moving. Another very important
aspect of <code>MotionEvent</code> is that not only describes one movement but can also <strong>describe multi-touch events</strong>.
This is particularly important if we are trying to identify multi-touch gestures such as
scrolling with two fingers or two finger double tap.</p>

<h2>Gesture Detector</h2>

<p>Now that we know how events are described on Android, it&rsquo;s time to understand how gestures are
detected and how to apply it to our purpose. For that matter, Android provides the
<a href="http://developer.android.com/reference/android/view/GestureDetector.html">GestureDetector</a></p>

<p>There are two different ways of intercepting gestures on Android. One can use
the <a href="http://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html">SimpleGestureListener</a> class,
which wraps around the interfaces <a href="http://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html">OnGestureListener</a>
and <a href="http://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html">OnDoubleTapListener</a>.
Think about it as a convenience class to extend when you only want to listen for a subset
of all the gestures.</p>

<p>The other approach is to implement the interfaces that are more interesting to you, since
we here to play, that&rsquo;s the one we’ll follow.</p>

<p>As you can see there are several events that we can intercept:</p>

<ul>
<li> <code>onDown()</code> : Notified when a tap occurs with the event that triggered it. This will be triggered immediately for every down event. All other events should be preceded by this.</li>
<li> <code>onShowPress()</code>: The user has performed a down {@link MotionEvent} and not performed a move or up yet.</li>
<li> <code>onSingleTapUp()</code>: Notified when a tap occurs with the up that triggered it.</li>
<li> <code>onScroll()</code>: Notified when a scroll occurs with the initial on down and the current move. The distance in x and y is also supplied for convenience.</li>
<li> <code>onLongPress()</code>: Notified when a long press occurs with the initial on down that trigged it.</li>
<li> <code>onFling()</code>: Notified of a fling event when it occurs with the initial on down and the matching up. The calculated velocity is supplied along the x and y axis in pixels per second.</li>
</ul>


<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/basic_gesture.gif">https://raw.githubusercontent.com/malmstein/Fenster/master/art/basic_gesture.gif</a>&#8221;></p>

<h2>The Gesture View</h2>

<p>Now that we have all the tools and we understand how this whole thing works, let&rsquo;s get our hands
dirty. Our approach will be to add a <code>View</code> to our <code>PlayerController</code>, this view will handle
all the gestures and delegate the interaction of those to the <code>PlayerController</code>.</p>

<p>All we need to do here is to send all the intercepted events coming from the
<code>FensterGestureControllerView</code> to the <code>GestureDetector</code> via the <code>onTouchEvent()</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gestureDetector</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As we said earlier, the <code>GestureDetector</code> is the one in charge of detecting all these events, in
combination with the &lsquo;GestureListener&rsquo;</p>

<h2>The Gesture and Events listeners</h2>

<p>We are only interested in some of the gestures that can be detected, in our case it&rsquo;s all described
in the following interface</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FensterEventsListener</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span> <span class="nf">onTap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">onHorizontalScroll</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="kt">float</span> <span class="n">delta</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">onVerticalScroll</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="kt">float</span> <span class="n">delta</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">onSwipeRight</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">onSwipeLeft</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">onSwipeBottom</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">onSwipeTop</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Once we detect one of these events, the <code>MediaPlayerController</code> will react by changing the
progress bar, raising the volume or skipping. Pretty straight forward right? Let&rsquo;s actually see
where the magic happens, the gesture detection.</p>

<p>As said earlier, the <a href="http://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html">OnGestureListener</a>
provides the interfaces we are interested in, let&rsquo;s start by detecting the <strong>Horizontal</strong> and <strong>Vertical</strong> scrolls.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">e1</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">e2</span><span class="o">,</span> <span class="kt">float</span> <span class="n">distanceX</span><span class="o">,</span> <span class="kt">float</span> <span class="n">distanceY</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Scroll&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">deltaY</span> <span class="o">=</span> <span class="n">e2</span><span class="o">.</span><span class="na">getY</span><span class="o">()</span> <span class="o">-</span> <span class="n">e1</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">deltaX</span> <span class="o">=</span> <span class="n">e2</span><span class="o">.</span><span class="na">getX</span><span class="o">()</span> <span class="o">-</span> <span class="n">e1</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">deltaX</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">deltaY</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">deltaX</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">SWIPE_THRESHOLD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">listener</span><span class="o">.</span><span class="na">onHorizontalScroll</span><span class="o">(</span><span class="n">e2</span><span class="o">,</span> <span class="n">deltaX</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">deltaX</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Slide right&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Slide left&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">deltaY</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">SWIPE_THRESHOLD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">listener</span><span class="o">.</span><span class="na">onVerticalScroll</span><span class="o">(</span><span class="n">e2</span><span class="o">,</span> <span class="n">deltaY</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">deltaY</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Slide down&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Slide up&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>onScroll()</code> interface provides the initial on down <code>MotionEvent</code> and the current one, using
the axis values we can detect the direction towards where the scrolling movement is going
and calculate the delta of the movement.</p>

<p>Note the threshold value, that needs to be there in order to filter movements. We don&rsquo;t want to
be confused with small movements or flings, only the gestures which have moved a certain
distance can be considered as scrolls.</p>

<p>It&rsquo;s also important to understand the difference between scrolls and flings since they are also
going to be treated differently. A <strong>scroll is a continuos movement</strong> like the one you&rsquo;ll use to
navigate through a timeline, as opposed to a <strong>fling which is intentionally a short and fast movement</strong>
which one will use to navigate horizontally through a view pager.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onFling</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">e1</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">e2</span><span class="o">,</span> <span class="kt">float</span> <span class="n">velocityX</span><span class="o">,</span> <span class="kt">float</span> <span class="n">velocityY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Fling event occurred.  Notification of this one happens after an &amp;ldquo;up&amp;rdquo; event.</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Fling</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">diffY</span> <span class="o">=</span> <span class="n">e2</span><span class="o">.</span><span class="na">getY</span><span class="o">()</span> <span class="o">-</span> <span class="n">e1</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">diffX</span> <span class="o">=</span> <span class="n">e2</span><span class="o">.</span><span class="na">getX</span><span class="o">()</span> <span class="o">-</span> <span class="n">e1</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">diffX</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">diffY</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">diffX</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">SWIPE_THRESHOLD</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">velocityX</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">minFlingVelocity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">diffX</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">listener</span><span class="o">.</span><span class="na">onSwipeRight</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">listener</span><span class="o">.</span><span class="na">onSwipeLeft</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">diffY</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">SWIPE_THRESHOLD</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">velocityY</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">minFlingVelocity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">diffY</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">listener</span><span class="o">.</span><span class="na">onSwipeBottom</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">listener</span><span class="o">.</span><span class="na">onSwipeTop</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There is a new constant introduced here, the <code>minFlingVelocity</code>. Since the fling is considered to
be a fast movement, we need to make sure that the motion event velocity is fast enough.</p>

<p>How do we get these constant values? Android conveniently has a  <a href="" title="http://developer.android.com/reference/android/view/ViewConfiguration.html">ViewConfiguration</a>
class with standard constants used in the UI for timeouts, sizes, and distances.</p>

<h2>The Controller View</h2>

<p>Ultimately, it will be the player controller the guy who will react to the events.
That&rsquo;s why we delegate all the responsibility to the gesture listener. We attach the listener
from the player controller to the listener like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFensterEventsListener</span><span class="o">(</span><span class="n">FensterEventsListener</span> <span class="n">listener</span><span class="o">){</span>
</span><span class='line'>        <span class="n">gestureDetector</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GestureDetector</span><span class="o">(</span><span class="n">getContext</span><span class="o">(),</span>
</span><span class='line'>                          <span class="k">new</span> <span class="nf">FensterGestureListener</span><span class="o">(</span><span class="n">listener</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">ViewConfiguration</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">getContext</span><span class="o">())));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Acting on the Media Player</h2>

<p>Finally, we have all the pieces together. We are now able to detect when the user is touching
the screen and we can also detect the type of gesture that is happening.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onHorizontalScroll</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">,</span> <span class="kt">float</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">updateVideoProgressBar</span><span class="o">(</span><span class="n">delta</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateVideoProgressBar</span><span class="o">(</span><span class="kt">float</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mSeekListener</span><span class="o">.</span><span class="na">onProgressChanged</span><span class="o">(</span><span class="n">mProgress</span><span class="o">,</span>
</span><span class='line'>        <span class="n">extractHorizontalDeltaScale</span><span class="o">(</span><span class="n">delta</span><span class="o">,</span> <span class="n">mProgress</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For this first attempt we will only act on the video progress bar, which is a pretty straigh
forward thing to do since we already have a <code>seekListener</code> which acts on the media player. The
only thing we need to do is scaling the user movement compared to the <a href="" title="http://developer.android.com/reference/android/widget/SeekBar.html">SeekBar</a>.</p>

<p>The interface is giving us a <strong>delta</strong>, which is the amount of pixels of the gesture. We are
taking as reference the whole <code>View</code> width, that way when the user scrolls the whole width of
the screen it will also seek through the whole video in a 1:1 scale. The last thing we
need to take into consideration the <strong>MAX</strong> parameter applied to the <code>SeekBar</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">extractDeltaScale</span><span class="o">(</span><span class="kt">int</span> <span class="n">availableSpace</span><span class="o">,</span> <span class="kt">float</span> <span class="n">deltaX</span><span class="o">,</span> <span class="n">SeekBar</span> <span class="n">seekbar</span><span class="o">){&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">deltaX</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">scale</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">progress</span> <span class="o">=</span> <span class="n">seekbar</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">seekbar</span><span class="o">.</span><span class="na">getMax</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// scrolling back</span>
</span><span class='line'>        <span class="n">scale</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">max</span> <span class="o">-</span> <span class="n">availableSpace</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'>        <span class="n">progress</span> <span class="o">=</span> <span class="n">progress</span> <span class="o">-</span> <span class="o">(</span><span class="n">scale</span> <span class="o">*</span> <span class="n">progress</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// scrolling forwards</span>
</span><span class='line'>        <span class="n">scale</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">availableSpace</span><span class="o">;</span>
</span><span class='line'>        <span class="n">progress</span> <span class="o">+=</span> <span class="n">scale</span> <span class="o">*</span> <span class="n">max</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">progress</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Once this is all computed we can now scroll back and forth across all the video timeline.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/fenster_gesture.gif">https://raw.githubusercontent.com/malmstein/Fenster/master/art/fenster_gesture.gif</a>&#8221;></p>

<h2>Further reading</h2>

<p>If you want to experience further in detecting gestures and multitouch events, don’t
hesitate in importing two projects from the SDK samples: <code>BasicGestureDetect</code> and <code>BasicMultitouch</code>.
Yeah, they are basic, but it establishes the foundations of what we are going to do here.</p>

<p>There is also a pretty good training document about <a href="http://developer.android.com/training/gestures/detector.html">Gesture Detection</a> in
the Android Developer website.</p>

<h2>Fenster Library update</h2>

<p>In the next post we&rsquo;ll use the same techniques to act on several other aspects of the
<code>MediaPlayer</code>. In the meantime, the <a href="https://github.com/malmstein/fenster">Fenster</a> library has
been updated with all the parts of this post and the demo project also contains an example of
gesture detection against the <code>MediaPlayer</code>.</p>

<p>As always, all feedback received is more than welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use a TextureView to Display a Video With Custom Media Player Controls]]></title>
    <link href="http://malmstein.github.io/blog/2014/08/09/how-to-use-a-textureview-to-display-a-video-with-custom-media-player-controls/"/>
    <updated>2014-08-09T20:00:00+01:00</updated>
    <id>http://malmstein.github.io/blog/2014/08/09/how-to-use-a-textureview-to-display-a-video-with-custom-media-player-controls</id>
    <content type="html"><![CDATA[<p>For the past months at <a href="http://www.novoda.com">Novoda</a> I&rsquo;ve been working on several video applications <a href="https://play.google.com/store/apps/details?id=tv.arte.plus7">ARTE</a>,
<a href="https://play.google.com/store/apps/details?id=com.novoda.dch">Digital Concert Hall</a> and <a href="https://play.google.com/store/apps/details?id=com.mubi">MUBI</a>.</p>

<p>As you might figure by now, the common feature of these applications is to display a video with customised media player controls. I thought it would be
a good time to share some knowledge and show some ideas around video playing on Android. A couple of months ago I a <a href="https://speakerdeck.com/malmstein/streaming-the-droid">gave a talk</a>
 about it at <strong>Droidcon Berlin</strong> showing some code but I never had the proper amount of time to make it into a library.</p>

<!-- more -->


<h2>Media Player lifecycle</h2>

<p>The first thing we need to understand before playing videos or audio is the lifecycle of the <a href="http://developer.android.com/reference/android/media/MediaPlayer.html">Media Player</a></p>

<p><img class="<a" src="href="http://developer.android.com/images/mediaplayer_state_diagram.gif">http://developer.android.com/images/mediaplayer_state_diagram.gif</a>&#8221;></p>

<p>As you see it&rsquo;s pretty straight forward, <strong>there are only 10 different states</strong>&hellip;</p>

<p>The most important piece of information that can be extracted from this diagram is that one needs to be very strict regarding the
behaviour of the <code>MediaPlayer</code>. It&rsquo;s very easy to follow the steps in the wrong order which will lead to frustration since debug information that the
<code>MediaPlayer</code> provides is pretty bad:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getErrorMessage</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">frameworkError</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">messageId</span> <span class="o">=</span> <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">play_error_message</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">frameworkError</span> <span class="o">==</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_ERROR_IO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TextureVideoView error. File or network related operation errors.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">frameworkError</span> <span class="o">==</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_ERROR_MALFORMED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TextureVideoView error. Bitstream is not conforming to the related coding standard or file spec.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">frameworkError</span> <span class="o">==</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_ERROR_SERVER_DIED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TextureVideoView error. Media server died. In this case, the application must release the MediaPlayer object and instantiate a new one.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">frameworkError</span> <span class="o">==</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_ERROR_TIMED_OUT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TextureVideoView error. Some operation takes too long to complete, usually more than 3-5 seconds.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">frameworkError</span> <span class="o">==</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_ERROR_UNKNOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TextureVideoView error. Unspecified media player error.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">frameworkError</span> <span class="o">==</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_ERROR_UNSUPPORTED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TextureVideoView error. Bitstream is conforming to the related coding standard or file spec, but the media framework does not support the feature.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">frameworkError</span> <span class="o">==</span> <span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TextureVideoView error. The video is streamed and its container is not valid for progressive playback i.e the video&#39;s index (e.g moov atom) is not at the start of the file.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">messageId</span> <span class="o">=</span> <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">play_progressive_error_message</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">messageId</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This information can be accessed using two different listeners from the <code>MediaPlayer</code>, <a href="http://developer.android.com/reference/android/media/MediaPlayer.OnInfoListener.html">onInfoListener</a>
and <a href="http://developer.android.com/reference/android/media/MediaPlayer.OnErrorListener.html">onErrorListener</a>. We are learning all this before actually displaying
any content, and you thought this was going to be easy!</p>

<p>Now we understand how the <code>MediaPlayer</code> works, the next step is to decide how are we going to display the video, what <code>View</code> are we going to use?</p>

<h2>TextureView vs SurfaceView</h2>

<p>The easiest way of displaying a video in Android is using a <a href="http://developer.android.com/reference/android/widget/VideoView.html">VideoView</a>. With very few
lines of code you&rsquo;ll be able to display a video from a local source or from the internet and it will just play. <strong>This is a very good approach if you
don&rsquo;t need any fancy stuff</strong>, no customisation or no callbacks. In our case, customisation was needed hence callbacks were needed and this solution was simply
just not good enough.</p>

<p>In the first place my thought was to extend <code>VideoView</code> and add some functionality but if you&rsquo;ve checked the <a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/widget/VideoView.java">source code</a>,
<code>VideoView</code> is extending <code>SurfaceView</code> and that has some limitations and constraints. <code>SurfaceView</code> provides a dedicated drawing surface embedded inside of a view hierarchy,
the layout of which can be defined, in size and format. It also takes care of placing the surface at the correct location on the screen.</p>

<p>The main limitation is that <strong>SurfaceView can&rsquo;t be animated, moved or transformed</strong>, that&rsquo;s because it&rsquo;s created in a separate window and not
treated as a <code>View</code>. That was a big problem considering what we wanted to achieve so we turned our eyes
towards <a href="http://developer.android.com/reference/android/view/TextureView.html">TextureView</a>.</p>

<p>It&rsquo;s not all bad news for <code>SurfaceView</code>, <strong>Chrome</strong> used to use <code>TextureView</code> as the compositor target surface but they went back to using
<code>SurfaceView</code>. These are the main reasons:</p>

<ul>
<li>Because of its invalidation and buffering behaviour, TextureView adds 1-3 extra frames of latency to display updates.</li>
<li>TextureView is always composited using GL, whereas SurfaceTexture can be backed by a hardware overlay which uses less memory bandwidth and power.</li>
<li>The internal buffer queue of TextureView can end up using more memory than a SurfaceView.</li>
<li>We weren&rsquo;t really doing anything useful with the animation and transform capabilities of TextureView.</li>
</ul>


<p>Full discussion in Google Groups can be found <a href="https://groups.google.com/a/chromium.org/forum/#!topic/graphics-dev/Z0yE-PWQXc4">here</a></p>

<p>We wanted to transform and animate that view so our choice was already made.</p>

<h2>Custom Controls</h2>

<p>So the video is going to be displayed in a <code>TextureView</code>, now we need a way of interacting with the video. Yes, the media player controls.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/custom_controls.png">https://raw.githubusercontent.com/malmstein/Fenster/master/art/custom_controls.png</a>&#8221;></p>

<p>As you can see we decided to use a similar approach to what <strong>Youtube</strong> is doing, the custom controller occupies the whole screen making it very easy to use.
Quite frankly this is much more appealing from my point of view. We&rsquo;ve all seen these designs for video players where the controller is aligned to the
bottom of the screen (inspired in certain other platform) and I certainly believe this approach makes more sense.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>com.malmstein.fenster.VideoTouchRoot
</span><span class='line'>  xmlns:android=<span class="ni">&amp;ldquo;</span><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>http://schemas.android.com/apk/res/android<span class="nt">&lt;/a&gt;</span><span class="ni">&amp;rdquo;</span>
</span><span class='line'>  android:id=<span class="ni">&amp;ldquo;</span>@+id/media_controller_touch_root<span class="ni">&amp;rdquo;</span>
</span><span class='line'>  android:layout_width=<span class="ni">&amp;ldquo;</span>match_parent<span class="ni">&amp;rdquo;</span>
</span><span class='line'>  android:layout_height=<span class="ni">&amp;ldquo;</span>match_parent<span class="ni">&amp;rdquo;</span>
</span><span class='line'>  android:background=<span class="ni">&amp;ldquo;</span>@color/default_bg<span class="ni">&amp;rdquo;</span>&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;hellip;</span>.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>/com.malmstein.fenster.VideoTouchRoot&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The most important part of this custom controller is <strong>the root layout which is going to enable / disable the controller itself</strong>. That is the <code>VideoTouchRoot</code> and
it&rsquo;s nothing else than a <code>FrameLayout</code> we put as a layout root to get notified about any screen touches. The <code>PlayerController</code> will set a listener and show or
hide the view accordingly</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">VideoTouchRoot</span> <span class="n">touchRoot</span> <span class="o">=</span> <span class="o">(</span><span class="n">VideoTouchRoot</span><span class="o">)</span> <span class="n">v</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">media_controller_touch_root</span><span class="o">);</span>
</span><span class='line'><span class="n">touchRoot</span><span class="o">.</span><span class="na">setOnTouchReceiver</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>How does the PlayerController work?</strong></p>

<p>Basically, the big part of the job is done when the <code>PlayerController</code> needs to be attached. It&rsquo;s the <code>TextureView</code> who takes care of this job, setting an anchor
view which is the <code>PlayerController</code> itself.</p>

<p>Once this view is anchored it&rsquo;s just a matter of setting listeners to all the events we want to track (<strong>Play</strong>/<strong>Pause</strong>/<strong>Seek</strong>) and handle the communication
between the view and the <code>MediaPlayer</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAnchorView</span><span class="o">(</span><span class="kd">final</span> <span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mAnchor</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>    <span class="n">LayoutParams</span> <span class="n">frameParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LayoutParams</span><span class="o">(</span>
</span><span class='line'>            <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span>
</span><span class='line'>            <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span>
</span><span class='line'>    <span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">removeAllViews</span><span class="o">();</span>
</span><span class='line'><span class="n">View</span> <span class="n">v</span> <span class="o">=</span> <span class="n">makeControllerView</span><span class="o">();</span>
</span><span class='line'><span class="n">addView</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">frameParams</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>TextureVideoView</h2>

<p>At this point we know how the controller is shown / hidden and which component is that view anchored to, but we are missing the big part of this puzzle
which is the View who handles it all, the <code>TextureVideoView</code>.</p>

<p>This view is the only one communicating with the <code>MediaPlayer</code>, which allows us to handle on the interaction between the controller and the player
transparently to the other parts of the application. Going back to the initial state diagram, one can see that it would be very helpful to save
the actual state of the player in order to know which steps can be followed. The <code>TextureVideoView</code> <strong>keeps track internally of that state</strong>.</p>

<p>Another important aspect of the view consists in handling all the listeners that the <code>MediaPlayer</code> exposes</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setOnPreparedListener</span><span class="o">(</span><span class="n">mPreparedListener</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setOnVideoSizeChangedListener</span><span class="o">(</span><span class="n">mSizeChangedListener</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setOnCompletionListener</span><span class="o">(</span><span class="n">mCompletionListener</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setOnErrorListener</span><span class="o">(</span><span class="n">mErrorListener</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setOnInfoListener</span><span class="o">(</span><span class="n">mInfoListener</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setOnBufferingUpdateListener</span><span class="o">(</span><span class="n">mBufferingUpdateListener</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">getContext</span><span class="o">(),</span> <span class="n">mUri</span><span class="o">,</span> <span class="n">mHeaders</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setSurface</span><span class="o">(</span><span class="k">new</span> <span class="nf">Surface</span><span class="o">(</span><span class="n">mSurfaceTexture</span><span class="o">));</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setAudioStreamType</span><span class="o">(</span><span class="n">AudioManager</span><span class="o">.</span><span class="na">STREAM_MUSIC</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">setScreenOnWhilePlaying</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">mMediaPlayer</span><span class="o">.</span><span class="na">prepareAsync</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mCurrentState</span> <span class="o">=</span> <span class="n">STATE_PREPARING</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see, there is a big chunk of listeners to be set here, not the nicest looking part but the most helpful of all. Not only we&rsquo;ve set
all the listeners but also created the <a href="http://developer.android.com/reference/android/graphics/SurfaceTexture.html">SurfaceTexture</a> <strong>where the video
will be displayed</strong>, set the DataSource with the video information and last but not least important, asked the <code>MediaPlayer</code> to prepare itself in order
to start playing the video.</p>

<p>Important here not to call <code>prepare()</code> but use <code>prepareAsync()</code> instead. As you can imagine the <code>prepare()</code> method is <strong>run in the UI thread</strong> which will block
the application, by using the <code>onPreparedListener</code> we&rsquo;ll be notified when the <code>MediaPlayer</code> can start playing the video. It&rsquo;s just another listener and
we love them, don&rsquo;t we?</p>

<p><strong>Notify when the video is playing</strong></p>

<p>From all those listeners that we&rsquo;ve set earlier, perhaps the one which tells us more about the <code>MediaPlayer</code> status is the <code>onInfoListener()</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">OnInfoListener</span> <span class="n">onInfoToPlayStateListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">OnInfoListener</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInfo</span><span class="o">(</span><span class="kd">final</span> <span class="n">MediaPlayer</span> <span class="n">mp</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">what</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">extra</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">noPlayStateListener</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="nf">if</span> <span class="o">(</span><span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_INFO_VIDEO_RENDERING_START</span> <span class="o">==</span> <span class="n">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">onPlayStateListener</span><span class="o">.</span><span class="na">onFirstVideoFrameRendered</span><span class="o">();</span>
</span><span class='line'>      <span class="n">onPlayStateListener</span><span class="o">.</span><span class="na">onPlay</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_INFO_BUFFERING_START</span> <span class="o">==</span> <span class="n">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">onPlayStateListener</span><span class="o">.</span><span class="na">onBuffer</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">MediaPlayer</span><span class="o">.</span><span class="na">MEDIA_INFO_BUFFERING_END</span> <span class="o">==</span> <span class="n">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">onPlayStateListener</span><span class="o">.</span><span class="na">onPlay</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>These three flags give us vital information, they will tell us <strong>when the first frame of the video starts to play</strong>, when the <strong>MediaPlayer starts buffering</strong> and
when the <strong>video is playing again after buffering</strong>. Finally all this information will be sent to the PlayerController in order to show / hide the controls
and the loading view.</p>

<h2>Introducing Fenster</h2>

<p>To wrap things up, it&rsquo;s always better to have a project to look into it. That&rsquo;s why I&rsquo;ve created <a href="https://github.com/malmstein/fenster">Fenster</a>, a library
where you&rsquo;ll find all these views we&rsquo;ve been talking about in this post and a nice <strong>demo project</strong> to show it all.</p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/malmstein/Fenster/master/art/video_example.gif">https://raw.githubusercontent.com/malmstein/Fenster/master/art/video_example.gif</a>&#8221;></p>

<p>As always, <strong>fork it</strong>, <strong>use it</strong>, and if you want to contribute <a href="https://github.com/malmstein/fenster/pulls">pull requests</a> are more than welcome!</p>
]]></content>
  </entry>
  
</feed>
